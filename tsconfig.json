{
  "compilerOptions": {
    "target": "ES2020",
    "module": "ES2020",
    "lib": ["ES2020", "DOM"],
    "downlevelIteration": true,
    "moduleResolution": "Bundler",
    "declaration": true,
    "outDir": "dist",
    "rootDir": ".",
    "strict": true,
    "noImplicitAny": false,
    "skipLibCheck": true,
    "resolveJsonModule": true,
    "esModuleInterop": true,
    "forceConsistentCasingInFileNames": true
  },
  "include": [
    "fp-optics-core.ts",
    "fp-optics-adapter.ts",
    "fp-optics.ts",
    "index.ts",
    "fp-hkt.ts",
    "fp-typeclasses-hkt.ts",
    "fp-derivation-helpers.ts",
    "fp-adt-builders.ts",
    "fp-adt-optics.ts",
    "fp-arrows-cokleisli-choice-cofree.ts",
    "fp-bazaar-composition.ts",
    "fp-gadt.ts",
    "fp-auto-registration.ts",
    "fp-immutable.ts",
    "fp-arrows-cokleisli.ts",
    "fp-bazaar-traversable-bridge.ts",
    "fp-maybe-unified.ts",
    "fp-arrows-kleisli-star.ts",
    "fp-option.ts",
    "fp-partial.ts",
    "fp-trampoline.ts",
    "fp-selective.ts",
    "fp-monoidal.ts",
    "fp-commutative-applicative.ts",
    "fp-either-traversable.ts",
    "fp-free-applicative.ts",
    "fp-monoidal-bridge.ts",
    "fp-either-derivation.ts",
    "fp-either-ops-table.ts",
    "fp-laws-optics.ts",
    "fp-cofree-lazy.ts",
    "fp-cofree-lazy-para.ts",
    "fp-cofree-lazy-bfs-build.ts",
    "fp-cofree-async.ts",
    "fp-cokleisli-arrow-choice.ts",
    "fp-bazaar-effects.ts",
    "fp-fluent-adt.ts",
    "fp-result.ts",
    "fp-do.ts",
    "fp-algebra.ts",
    "fp-algebras-forgetful.ts",
    "fp-sf-arrowchoice.ts",
    "fp-adjunction.ts",
    "fp-adjunction-free.ts",
    "fp-adt-builders-enhanced.ts",
    "fp-pattern-guards.ts",
    "fp-adt-builders-with-guards.ts",
    "fp-unified-adt-definition.ts",
    "fp-laws.ts",
    "fp-operad-cofree.ts",
    "fp-typeclasses-hok.ts",
    "fp-typeclasses.ts",
    "fp-variance-derivation.ts",
    "fp-stream-boundaries.ts",
    "fp-either-register.ts",
    "fp-typeclasses-unified.ts",
    "fp-either-unified.ts",
    "fp-result-unified.ts",
    "fp-bimonad-extended.ts",
    "fp-purity.ts",
    "fp-fluent-api.ts",
    "fp-frp-bridge.ts",
    "fp-stream-ops.ts",
    "fp-observable-lite.ts",
    "fp-stream-fusion.ts",
    "fp-usage-integration.ts",
    "fp-observable-optics.ts",
    "fluent-usage-wrapper.ts",
    "fp-fromarray.ts",
    "fp-closure.ts",
    "fp-yoneda.ts",
    "fp-semiring.ts",
    "fp-nat.ts",
    "fp-cokleisli.ts",
    "fp-cokleisli-cofree.ts",
    "fp-cofree-choice-uniform.ts",
    "fp-product-matchers.ts",
    "fp-array-extensions.ts",
    "fp-free.ts",
    "fp-mealy.ts",
    "fp-align.ts",
    "fp-either-classes.ts",
    "fp-cofree-lazy-iter.ts",
    "fp-free-cofree-pairing.ts",
    "fp-cofree-comonad.ts",
    "fp-cochoice.ts",
    "fp-match-product.ts",
    "fp-recursion-schemes-extra.ts",
    "fp-stream-state.ts",
    "fp-adt-optics-simple.ts",
    "fp-optics-iso-helpers.ts",
    "fp-traversal-shim.ts",
    "fp-optics-traversal.ts",
    "fp-optics-affine.ts",
    "fp-optics-everywhere.ts",
    "fp-optics-instances.ts",
    "fp-profunctor-optics.ts",
    "fp-optics-auto-derivation.ts",
    "fp-registry-init.ts",
    "fp-optics-indexed.ts",
    // "fp-anamorphisms.ts", // Clean - 0 errors
    "fp-readonly-patterns.ts",
    "fp-pattern-matching-ergonomics.ts",
    "fp-typeclass-optimization.ts",
    "fp-typeclass-usage-derivation.ts",
    "fp-advanced-type-system-examples.ts",
    "src/**/*.ts",
    "fp-arrows-cokleisli-choice.ts",
    "fp-maybe.ts",
    "fp-maybe-fluent.ts", // Clean - 0 errors after canonical Maybe reconciliation
    "fp-maybe-unified-enhanced.ts", // Clean - 0 errors after canonical Maybe reconciliation (remove local Maybe type, use canonical matchMaybe)
    "fp-monoids.ts",
    "fp-bazaar-algebraic.ts",
    "fp-persistent.ts",
    "fp-persistent-hkt-gadt.ts",
    "fp-dot-stream-modules-complete.ts",
    "fp-dot-stream-modules-simple.ts",
    "fp-hylo.ts",
    "fp-hylomorphisms.ts",
    "fp-anamorphisms.ts",
    "fp-gadt-enhanced.ts",
    "fp-either.ts",

      "fp-deformation-dgla-enhanced.ts",
      "fp-deformation-dgla.ts", // Clean - 0 errors after koszul comparison fixes
      "fp-deformation-integration.ts", // Clean - 0 errors after koszul and variable name fixes
  ],
  "exclude": [
    "dist",
    "node_modules",
  "example-before-migration.ts", 
    "fp-advanced-dot-composition.ts",
  "example-usage.ts",

  "fp-advanced-type-system-examples.ts",
  "fp-cooperad-dg.examples.ts",
  "fp-cooperad-dg.test.ts",
  "fp-pattern-matching-with-guards-complete.ts",
  "fp-bazaar-planner.ts",
  "fp-purity-combinators.ts",
  "fp-purity-pattern-matching.ts",
  "fp-adt-eq-ord-show-complete.ts",
  "fp-arrow-laws-glue.ts",
  "fp-bazaar-stream.ts",
  "fp-catamorphisms.ts", // Clean - 0 errors after pmatch type parameter fixes
  "fp-cooperad-trees.ts",
  "fp-cooperad-weights-extras.ts",
  "fp-cooperad-weights.ts",
  "fp-derivable-instances.ts",
  "fp-derivable-purity.ts",
  // "fp-dg-cooperad-integration.ts", // Clean - 0 errors after type and immutable array fixes
  // "fp-dg-cooperad.ts", // Clean - 0 errors after immutable array fixes

  "fp-dot-style-stream-coordination.ts",
  "fp-dual-api.ts",
  "fp-effect-monads-complete.ts",
  "fp-effect-monads.ts",
  "fp-enhanced-dual-api.ts",
  "fp-fluent-adt-complete.ts",
  "fp-fluent-instance-methods.ts",
  "fp-fluent-methods.ts",
  "fp-fluent-traverse.ts",
  "fp-frp-fusion.ts",
  "fp-gadt-integrated-clean.ts",
  "fp-homotopy-ergonomics.ts",
  "fp-laws-arrows.ts",
  "fp-material-shape-separation.ts",
  "fp-optics-scheduler.ts"
  
  ]
}