// examples/packs/sset-pack.ts
import type { TheoryPack } from "../../src/logic/finite-limit-and-coherent";
import { discoverTheorem28 } from "../../src/discovery/theorem-2_8-discovery";

export const SSetPack: TheoryPack = {
  S: { name: "SSet", sorts: [{name:"Δ^n-sets"}], ops: [] }, // finite-limit definable (Prop. 2.3, Ex. 2.4)
  W: { name: "Topological weak equivalences", finiteLength: false, countableFragment: true },
  C: { name: "Monomorphisms", finiteLength: true }, // or "cofibrations generated by horns"
  cofibrationsAreCofIinSet: true, // standard sSet
  // If you have a coherent definition for cof in every topos, flip this on:
  cofibrationsAreCofIInEveryTopos: false
};

// Simple entry point for discovery
// eslint-disable-next-line no-console
console.log(discoverTheorem28(SSetPack));

// After constructing fp, demonstrate toggles (builds unit/Σ via cog(F) presentation when available):
import type { ChaseOptions } from "../../src/kan/chase-lkan";

const opts2: ChaseOptions = {
  flavor: "free",              // cartesian ⇒ free
  instanceSemantics: "labeled-nulls" // or "constants" when I is constant-only
};
const LKE2 = leftKanViaChase(fp, opts2);
console.log("unit components available?", !!LKE2.unit);
